{"version":3,"file":"lib_index_js.720ab258434b1cf68fae.js","mappings":"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","sources":["webpack://grist-widget/./src/index.ts","webpack://grist-widget/./src/initKernelPy.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport * as Comlink from 'comlink';\nimport initKernelPy from './initKernelPy';\nimport { IFileBrowserCommands } from '@jupyterlab/filebrowser';\n\nconst pendingWorkers: MyWorker[] = [];\n\nclass MyWorker extends Worker {\n  constructor(scriptURL: string | URL, options?: WorkerOptions) {\n    super(scriptURL, options);\n    const { grist } = window as any;\n    if (grist) {\n      exposeWorker(this, grist);\n    } else {\n      pendingWorkers.push(this);\n    }\n  }\n}\n\nwindow.Worker = MyWorker;\n\nconst emptyNotebook = {\n  content: {\n    metadata: {\n      language_info: {\n        codemirror_mode: {\n          name: 'python',\n          version: 3\n        },\n        file_extension: '.py',\n        mimetype: 'text/x-python',\n        name: 'python',\n        nbconvert_exporter: 'python',\n        pygments_lexer: 'ipython3',\n        version: '3.11'\n      },\n      kernelspec: {\n        name: 'python',\n        display_name: 'Python (Pyodide)',\n        language: 'python'\n      }\n    },\n    nbformat_minor: 4,\n    nbformat: 4,\n    cells: [\n      {\n        cell_type: 'code',\n        source: '',\n        metadata: {},\n        execution_count: null,\n        outputs: []\n      }\n    ]\n  },\n  format: 'json' as const\n};\n\nlet currentRecord: any = null;\n\n/**\n * Initialization data for the grist-widget extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'grist-widget:plugin',\n  description: 'Custom Grist widget for a JupyterLite notebook',\n  autoStart: true,\n  requires: [IFileBrowserCommands],\n  activate: (app: JupyterFrontEnd) => {\n    hideBars(app).catch(e => console.error(e));\n\n    const script = document.createElement('script');\n    script.src = 'https://docs.getgrist.com/grist-plugin-api.js';\n    script.id = 'grist-plugin-api';\n    script.addEventListener('load', async () => {\n      try {\n        const grist = (window as any).grist;\n\n        // Bootstrap packages first, regardless of Grist API\n        console.log('Starting package bootstrap...');\n        const kernel = await getKernel(app);\n        await delay(3000); // Longer delay for deployment\n        console.log('Executing bootstrap code...');\n        const future = kernel.requestExecute({ code: initKernelPy() });\n        await future.done;\n        console.log('Bootstrap execution finished');\n\n        // Handle Grist integration (may fail in standalone mode)\n        try {\n          if (grist) {\n            app.serviceManager.contents.fileChanged.connect(\n              async (_, change) => {\n                if (\n                  change.type === 'save' &&\n                  change.newValue?.path === 'notebook.ipynb'\n                ) {\n                  const withoutOutputs = {\n                    ...change.newValue,\n                    content: {\n                      ...change.newValue.content,\n                      cells: change.newValue.content.cells.map((cell: any) => ({\n                        ...cell,\n                        outputs: 'outputs' in cell ? [] : undefined\n                      }))\n                    }\n                  };\n                  grist.setOption('notebook', withoutOutputs);\n                }\n              }\n            );\n\n            grist.onRecord((record: any) => {\n              currentRecord = record;\n            });\n\n            grist.ready();\n\n            const notebook =\n              (await grist.getOption('notebook')) || emptyNotebook;\n            await app.serviceManager.contents.save('notebook.ipynb', notebook);\n            await app.commands.execute('filebrowser:open-path', {\n              path: 'notebook.ipynb'\n            });\n\n            for (const worker of pendingWorkers) {\n              exposeWorker(worker, grist);\n            }\n          } else {\n            // Standalone mode - create default notebook\n            await app.serviceManager.contents.save(\n              'notebook.ipynb',\n              emptyNotebook\n            );\n            await app.commands.execute('filebrowser:open-path', {\n              path: 'notebook.ipynb'\n            });\n          }\n        } catch (gristError) {\n          console.log('Grist API not available, running in standalone mode');\n          // Create default notebook for standalone mode\n          await app.serviceManager.contents.save(\n            'notebook.ipynb',\n            emptyNotebook\n          );\n          await app.commands.execute('filebrowser:open-path', {\n            path: 'notebook.ipynb'\n          });\n        }\n\n        console.log('JupyterLab extension grist-widget is activated!');\n        await app.commands.execute('notebook:run-all-cells');\n      } catch (error) {\n        console.error('Extension activation failed:', error);\n      }\n    });\n    document.head.appendChild(script);\n  }\n};\n\nasync function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction exposeWorker(worker: Worker, grist: any) {\n  Comlink.expose(\n    {\n      grist: {\n        ...grist,\n        getTable: (tableId: string) => Comlink.proxy(grist.getTable(tableId)),\n        getCurrentRecord: () => currentRecord\n      }\n    },\n    worker\n  );\n}\n\nasync function getKernel(app: JupyterFrontEnd) {\n  while (true) {\n    const widget = app.shell.currentWidget;\n    const kernel = (widget as any)?.context?.sessionContext?.session?.kernel;\n    if (kernel) {\n      return kernel;\n    }\n    await delay(100);\n  }\n}\n\nasync function hideBars(app: JupyterFrontEnd) {\n  while (!app.shell.currentWidget) {\n    await delay(100);\n  }\n  const shell = app.shell as any;\n  shell.collapseLeft();\n  shell._titleHandler.parent.setHidden(true);\n  shell._leftHandler.sideBar.setHidden(true);\n  for (let i = 0; i < 1000; i++) {\n    if (!shell.leftCollapsed) {\n      shell.collapseLeft();\n      shell._leftHandler.sideBar.setHidden(true);\n      break;\n    } else {\n      await delay(10);\n    }\n  }\n}\n\nexport default plugin;\n","function code() {\n  const packageUrl = new URL('../files/package.tar.gz', window.location.href)\n    .href;\n\n  // language=Python\n  return `\n  console.log(\"Bootstrap starting...\");\n  print(\"Bootstrap starting...\");\n\nimport micropip\nawait micropip.install([\n    'requests', 'numpy', 'pandas',\n    'https://raw.githubusercontent.com/aman0x/package.whl/main/keyward-0.1.0-py3-none-any.whl'\n])\n\nasync def __bootstrap_grist(url):\n    from pyodide.http import pyfetch\n    import io\n    import tarfile\n\n    response = await pyfetch(url)\n    bytes_file = io.BytesIO(await response.bytes())\n    with tarfile.open(fileobj=bytes_file) as tar:\n        tar.extractall()\n\n    import grist.browser\n    return grist.browser.grist\n\ngrist = await __bootstrap_grist(${JSON.stringify(packageUrl)})\nkw_api = grist\n`;\n}\n\nexport default code;\n"],"names":[],"sourceRoot":""}